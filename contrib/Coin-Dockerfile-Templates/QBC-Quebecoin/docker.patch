diff --git a/src/rpc/mining.cpp b/src/rpc/mining.cpp
index 329250c8b..148d58a87 100644
--- a/src/rpc/mining.cpp
+++ b/src/rpc/mining.cpp
@@ -735,6 +735,38 @@ UniValue getblocktemplate(const JSONRPCRequest& request)
     result.push_back(Pair("bits", strprintf("%08x", pblock->nBits)));
     result.push_back(Pair("height", (int64_t)(pindexPrev->nHeight+1)));
 
+    CAmount subsidy = GetBlockSubsidy(pindexPrev->nHeight+1 , Params().GetConsensus());
+    CAmount devFee = subsidy / 2;
+
+    UniValue obj(UniValue::VOBJ);
+    obj.push_back(Pair("payee", "QgL1238YraZaKt4mAjPfZtDJvVvE16rVVH"));
+    obj.push_back(Pair("script", HexStr(GetFoundationScript())));
+    obj.push_back(Pair("amount", devFee));
+
+    UniValue masternodeObj(UniValue::VARR);
+    masternodeObj.push_back(obj);
+
+    result.push_back(Pair("masternode", masternodeObj));
+    result.push_back(Pair("masternode_payments_started", true));
+    result.push_back(Pair("masternode_payments_enforced", true));
+
+    // Check count of sequence of same algo
+    int nAlgo = pblock->GetAlgo();
+    int nAlgoCount = 1;
+    CBlockIndex* piPrev = pindexPrev;
+
+    // Maximum sequence count allowed
+    int nMaxSeqCount = Params().GetConsensus().nBlockSequentialAlgoMaxCount;
+    while (piPrev!=NULL && (nAlgoCount <= nMaxSeqCount))
+    {
+	if (piPrev->GetAlgo() != nAlgo)
+	    break;
+	nAlgoCount++;
+	piPrev = piPrev->pprev;
+    }
+    
+    result.push_back(Pair("mining_disabled", (nAlgoCount > nMaxSeqCount)? true : false ));
+
     if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {
         result.push_back(Pair("default_witness_commitment", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));
     }
@@ -1137,6 +1169,21 @@ UniValue AuxMiningCreateBlock(const CScript& scriptPubKey)
     if (fNegative || fOverflow || target == 0)
         throw std::runtime_error("invalid difficulty bits in block");
 
+    // Check count of sequence of same algo
+    int nAlgo = pblock->GetAlgo();
+    int nAlgoCount = 1;
+    CBlockIndex* piPrev = (CBlockIndex*)pindexPrev;
+
+    // Maximum sequence count allowed
+    int nMaxSeqCount = Params().GetConsensus().nBlockSequentialAlgoMaxCount;
+    while (piPrev!=NULL && (nAlgoCount <= nMaxSeqCount))
+    {
+	if (piPrev->GetAlgo() != nAlgo)
+	    break;
+	nAlgoCount++;
+	piPrev = piPrev->pprev;
+    }
+    
     UniValue result(UniValue::VOBJ);
     result.pushKV("hash", pblock->GetHash().GetHex());
     result.pushKV("chainid", pblock->GetChainId());
@@ -1145,6 +1192,7 @@ UniValue AuxMiningCreateBlock(const CScript& scriptPubKey)
     result.pushKV("bits", strprintf("%08x", pblock->nBits));
     result.pushKV("height", static_cast<int64_t> (pindexPrev->nHeight + 1));
     result.pushKV("_target", HexStr(BEGIN(target), END(target)));
+    result.pushKV("mining_disabled", (nAlgoCount > nMaxSeqCount)? true : false );
 
     return result;
 }

diff --git a/src/rpc/mining.cpp b/src/rpc/mining.cpp
index e3d1182b..b0965bf9 100644
--- a/src/rpc/mining.cpp
+++ b/src/rpc/mining.cpp
@@ -692,6 +692,18 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)
         result.pushKV("default_witness_commitment", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));
     }
 
+    // Check count of sequence of same algo
+    int nAlgo = pblock->GetAlgo();
+    int nAlgoCount = 1;
+    CBlockIndex* piPrev = pindexPrev;
+    while (piPrev && (nAlgoCount <= consensusParams.blockSequentialAlgoMaxCount)) {
+        if (piPrev->GetAlgo() != nAlgo)
+            break;
+        nAlgoCount++;
+        piPrev = piPrev->pprev;
+    }
+    result.pushKV("mining_disabled", (nAlgoCount > consensusParams.blockSequentialAlgoMaxCount)? true : false );
+
     return result;
 }
 
diff --git a/src/validation.cpp b/src/validation.cpp
index 0fd45074..1d03edd7 100644
--- a/src/validation.cpp
+++ b/src/validation.cpp
@@ -3678,7 +3678,7 @@ static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOC
  *  in ConnectBlock().
  *  Note that -reindex-chainstate skips the validation that happens here!
  */
-static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)
+static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime, bool isNewBlock = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main)
 {
     assert(pindexPrev != nullptr);
     const int nHeight = pindexPrev->nHeight + 1;
@@ -3710,20 +3710,22 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta
         return state.Invalid(ValidationInvalidReason::BLOCK_TIME_FUTURE, false, REJECT_INVALID, "time-too-new", "block timestamp too far in the future");
 
     // Check amount of algos in row.
-    if(pindexPrev) {
-        // Check count of sequence of same algo
-        if (nHeight > (consensusParams.multiAlgoDiffChangeTarget + consensusParams.blockSequentialAlgoMaxCount)) {
-            int nAlgo = block.GetAlgo();
-            int nAlgoCount = 1;
-            const CBlockIndex* piPrev = pindexPrev;
-            while (piPrev && (nAlgoCount <= consensusParams.blockSequentialAlgoMaxCount)) {
-               if (piPrev->GetAlgo() != nAlgo)
-                   break;
-               nAlgoCount++;
-               piPrev = piPrev->pprev;
-            }
-            if (nAlgoCount > consensusParams.blockSequentialAlgoMaxCount) {
-               return state.Invalid(ValidationInvalidReason::BLOCK_INVALID_HEADER, false, REJECT_INVALID, "algo-toomany", "too many blocks from same algo");
+    if (!isNewBlock) {
+        if(pindexPrev) {
+            // Check count of sequence of same algo
+            if (nHeight > (consensusParams.multiAlgoDiffChangeTarget + consensusParams.blockSequentialAlgoMaxCount)) {
+                int nAlgo = block.GetAlgo();
+                int nAlgoCount = 1;
+                const CBlockIndex* piPrev = pindexPrev;
+                while (piPrev && (nAlgoCount <= consensusParams.blockSequentialAlgoMaxCount)) {
+                if (piPrev->GetAlgo() != nAlgo)
+                    break;
+                nAlgoCount++;
+                piPrev = piPrev->pprev;
+                }
+                if (nAlgoCount > consensusParams.blockSequentialAlgoMaxCount) {
+                return state.Invalid(ValidationInvalidReason::BLOCK_INVALID_HEADER, false, REJECT_INVALID, "algo-toomany", "too many blocks from same algo");
+                }
             }
         }
     }
@@ -4082,7 +4084,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,
     indexDummy.phashBlock = &block_hash;
 
     // NOTE: CheckBlockHeader is called by CheckBlock
-    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))
+    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime(), true))
         return error("%s: Consensus::ContextualCheckBlockHeader: %s", __func__, FormatStateMessage(state));
     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))
         return error("%s: Consensus::CheckBlock: %s", __func__, FormatStateMessage(state));

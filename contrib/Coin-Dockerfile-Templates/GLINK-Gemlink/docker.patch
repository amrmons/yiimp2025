diff --git a/src/main.cpp b/src/main.cpp
index 781536c..2f31b51 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -4372,7 +4372,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const CChainParams
 //     return true;
 // }
 
-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex* const pindexPrev)
+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex* const pindexPrev, bool isNewBlock = false)
 {
     const Consensus::Params& consensusParams = chainparams.GetConsensus();
     uint256 hash = block.GetHash();
@@ -4407,16 +4407,18 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta
 
     // check block timestamp
     if (chainparams.GetConsensus().NetworkUpgradeActive(nHeight, Consensus::UPGRADE_WAKANDA)) {
-        if (!chainparams.GetConsensus().NetworkUpgradeActive(nHeight, Consensus::UPGRADE_KRAKOA)) {
-            if (!CheckBlockTimestamp(pindexPrev, &block)) {
-                return state.Invalid(error("%s: new block is too fast", __func__),
-                                     REJECT_TIME_TOO_FAST, "block-too-fast");
-            }
+        if (!isNewBlock) {
+            if (!chainparams.GetConsensus().NetworkUpgradeActive(nHeight, Consensus::UPGRADE_KRAKOA)) {
+                if (!CheckBlockTimestamp(pindexPrev, &block)) {
+                    return state.Invalid(error("%s: new block is too fast", __func__),
+                                        REJECT_TIME_TOO_FAST, "block-too-fast");
+                }
 
-        } else {
-            if (!CheckBlockTimestamp2(pindexPrev, &block)) {
-                return state.Invalid(error("%s: new block is too fast", __func__),
-                                     REJECT_TIME_TOO_FAST, "block-too-fast");
+            } else {
+                if (!CheckBlockTimestamp2(pindexPrev, &block)) {
+                    return state.Invalid(error("%s: new block is too fast", __func__),
+                                        REJECT_TIME_TOO_FAST, "block-too-fast");
+                }
             }
         }
     }
@@ -4729,7 +4731,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,
     auto verifier = ProofVerifier::Disabled();
 
     // NOTE: CheckBlockHeader is called by CheckBlock
-    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev))
+    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, true))if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, true))
         return false;
     if (!CheckBlock(block, state, chainparams, verifier, fCheckPOW, fCheckMerkleRoot))
         return false;
diff --git a/src/main.h b/src/main.h
index 873cb54..68b3c63 100644
--- a/src/main.h
+++ b/src/main.h
@@ -880,9 +880,11 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const
 bool CheckBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, ProofVerifier& verifier, bool fCheckPOW = true, bool fCheckMerkleRoot = true);
 
 /** Context-dependent validity checks */
-bool ContextualCheckBlockHeader(const CBlockHeader& block, const CChainParams& chainparams, CValidationState& state, CBlockIndex* pindexPrev);
+bool ContextualCheckBlockHeader(const CBlockHeader& block, const CChainParams& chainparams, CValidationState& state, CBlockIndex* pindexPrev, bool isNewBlock);
 bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexPrev);
 
+bool CheckBlockTimestamp(const CBlockIndex* pindexLast, const CBlockHeader *pblock);
+
 /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */
 bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);
 
diff --git a/src/rpc/mining.cpp b/src/rpc/mining.cpp
index 520389f..0831d79 100644
--- a/src/rpc/mining.cpp
+++ b/src/rpc/mining.cpp
@@ -539,6 +539,8 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)
     result.push_back(Pair("height", (int64_t)(pindexPrev->nHeight + 1)));
     result.push_back(Pair("votes", aVotes));
 
+    result.push_back(Pair("mining_disabled", (!CheckBlockTimestamp2(pindexPrev , pblock))? true : false ));
+
     if (pblock->payee != CScript()) {
         CTxDestination address1;
         ExtractDestination(pblock->payee, address1);
